Traceback (most recent call last):
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib64/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/george/drought-311-venv/lib64/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from plotly.subplots import make_subplots

conditions = [
    (lambda x: x < -0.5, 'Mildly dry', 1, 1),
    (lambda x: x < -1, 'Moderately dry', 1, 2), 
    (lambda x: x < -1.5, 'Severely dry', 2, 1), 
    (lambda x: x < -2, 'Extremely dry', 2, 2)
]

fig = make_subplots(
    rows=2, cols=2,  # Adjust the number of rows and columns as needed
    # subplot_titles=('Mildly dry', 'Moderately dry',  'Severely dry', 'Extremely dry'),  # Titles for each subplot
    specs=[[{'type': 'scattergeo'}, {'type': 'scattergeo'}], [{'type': 'scattergeo'}, {'type': 'scattergeo'}]],
    vertical_spacing=0.,  # Reduce space between rows
    horizontal_spacing=0.01
)

def categorize_occurrences(x):
    if x <= 1:
        return 'Up to 1 month'
    elif x <= 3:
        return 'Up to 3 months'
    elif x <= 6:
        return 'Up to 6 months'
    else:
        return 'More than 6 months'

def add_traces_to_subplot(fig, df, row, col, show_legend):
    lat = df['lat'].values
    lon = df['lon'].values
    category = df['category'].values

    color_map = {
        'Up to 1 month': 'blue',
        'Up to 3 months': 'green',
        'Up to 6 months': 'orange',
        'More than 6 months': 'red'
    }
    
    # Plot each category separately to apply different colors
    for cat in color_map:
        mask = df['category'] == cat
        fig.add_trace(go.Scattergeo(
            lon=lon[mask],
            lat=lat[mask],
            text=category[mask],
            mode='markers',
            marker=dict(
                size=7,
                color=color_map[cat],
                opacity=1,
                line=dict(width=1, color='black')
            ),
            name=cat,  # Label for the legend
            showlegend=show_legend  # Control legend visibility
        ), row=row, col=col)

    

for condition, description, row, col in conditions:
    result = condition(event_data).sum(dim='time')
    df = result.to_dataframe().reset_index()
    df['category'] = df['SPEI12'].apply(categorize_occurrences)
    add_traces_to_subplot(fig, df, row, col, show_legend)

# Update the layout: Increase the size and set the geographic scope
fig.update_layout(
        # width=1200,  # Increase plot width
    height=1200,  # Increase plot height
    geo=dict(
            scope='world',  # Adjust the scope if necessary, or use 'world' for a global view
            projection_type='natural earth',
            showcoastlines=True,
            showcountries=True,
            countrycolor="Black",
            coastlinecolor="Black",
            
            # Define the region of interest by setting lat/lon bounds
            lonaxis=dict(range=[lon.min() - 0.5, lon.max() + 0.5]),  # Longitude bounds
            lataxis=dict(range=[lat.min() - 0.5, lat.max() + 0.5]),  # Latitude bounds
            
            # Optionally, you can specify the center of the map
            center=dict(lon=lon.mean(), lat=lat.mean()),  # Center of the map
        ),
    geo2=dict(
            scope='world',  # Adjust the scope if necessary, or use 'world' for a global view
            projection_type='natural earth',
            showcoastlines=True,
            showcountries=True,
            countrycolor="Black",
            coastlinecolor="Black",
            
            # Define the region of interest by setting lat/lon bounds
            lonaxis=dict(range=[lon.min() - 0.5, lon.max() + 0.5]),  # Longitude bounds
            lataxis=dict(range=[lat.min() - 0.5, lat.max() + 0.5]),  # Latitude bounds
            
            # Optionally, you can specify the center of the map
            center=dict(lon=lon.mean(), lat=lat.mean()),  # Center of the map
        ),
    geo3=dict(
            scope='world',  # Adjust the scope if necessary, or use 'world' for a global view
            projection_type='natural earth',
            showcoastlines=True,
            showcountries=True,
            countrycolor="Black",
            coastlinecolor="Black",
            
            # Define the region of interest by setting lat/lon bounds
            lonaxis=dict(range=[lon.min() - 0.5, lon.max() + 0.5]),  # Longitude bounds
            lataxis=dict(range=[lat.min() - 0.5, lat.max() + 0.5]),  # Latitude bounds
            
            # Optionally, you can specify the center of the map
            center=dict(lon=lon.mean(), lat=lat.mean()),  # Center of the map
        ),
    geo4=dict(
            scope='world',  # Adjust the scope if necessary, or use 'world' for a global view
            projection_type='natural earth',
            showcoastlines=True,
            showcountries=True,
            countrycolor="Black",
            coastlinecolor="Black",
            
            # Define the region of interest by setting lat/lon bounds
            lonaxis=dict(range=[lon.min() - 0.5, lon.max() + 0.5]),  # Longitude bounds
            lataxis=dict(range=[lat.min() - 0.5, lat.max() + 0.5]),  # Latitude bounds
            
            # Optionally, you can specify the center of the map
            center=dict(lon=lon.mean(), lat=lat.mean()),  # Center of the map
        ),
    title=f"Monthly Occurrences of:",
    # annotations=[
    #     dict(
    #         x=0.25,  # Center the title horizontally
    #         y=0.95,  # Position the title above the plot
    #         xref='paper',
    #         yref='paper',
    #         text='Mildly dry',
    #         showarrow=False,
    #         font=dict(size=14, color='black'),
    #         align='center'
    #     ),
    #     dict(
    #         x=.75,  # Center the title horizontally
    #         y=0.95,  # Position the title above the plot
    #         xref='paper',
    #         yref='paper',
    #         text='Moderately dry',
    #         showarrow=False,
    #         font=dict(size=14, color='black'),
    #         align='center'
    #     ),
    #     dict(
    #         x=0.25,  # Center the title horizontally
    #         y=0.4,  # Position the title above the plot
    #         xref='paper',
    #         yref='paper',
    #         text='Severely dry',
    #         showarrow=False,
    #         font=dict(size=14, color='black'),
    #         align='center'
    #     ),
    #     dict(
    #         x=0.75,  # Center the title horizontally
    #         y=0.4,  # Position the title above the plot
    #         xref='paper',
    #         yref='paper',
    #         text='Extremely dry',
    #         showarrow=False,
    #         font=dict(size=14, color='black'),
    #         align='center'
    #     ),
    # ],
    margin=dict(l=10, r=10, t=40, b=10)
    )    
fig.update_layout(
    legend=dict(
        x=1.05,
        y=0.5,
        traceorder='normal',
        orientation='v'
    )
)
    
# Show the plot
fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[36], line 64[0m
[1;32m     62[0m     df [38;5;241m=[39m result[38;5;241m.[39mto_dataframe()[38;5;241m.[39mreset_index()
[1;32m     63[0m     df[[38;5;124m'[39m[38;5;124mcategory[39m[38;5;124m'[39m] [38;5;241m=[39m df[[38;5;124m'[39m[38;5;124mSPEI12[39m[38;5;124m'[39m][38;5;241m.[39mapply(categorize_occurrences)
[0;32m---> 64[0m     add_traces_to_subplot(fig, df, row, col, [43mshow_legend[49m)
[1;32m     66[0m [38;5;66;03m# Update the layout: Increase the size and set the geographic scope[39;00m
[1;32m     67[0m fig[38;5;241m.[39mupdate_layout(
[1;32m     68[0m         [38;5;66;03m# width=1200,  # Increase plot width[39;00m
[1;32m     69[0m     height[38;5;241m=[39m[38;5;241m1200[39m,  [38;5;66;03m# Increase plot height[39;00m
[0;32m   (...)[0m
[1;32m    173[0m     margin[38;5;241m=[39m[38;5;28mdict[39m(l[38;5;241m=[39m[38;5;241m10[39m, r[38;5;241m=[39m[38;5;241m10[39m, t[38;5;241m=[39m[38;5;241m40[39m, b[38;5;241m=[39m[38;5;241m10[39m)
[1;32m    174[0m     )    

[0;31mNameError[0m: name 'show_legend' is not defined

